#!/bin/bash
#
# functions used by the Linux scripts
#

# using $JAVA_HOME
use_java_home()
{
	if [ ! -z "$JAVA_HOME" -a -z "$jdk_home" ] ; then
    	jdk_home=$JAVA_HOME
	fi
} # use_java_home()

#
# parse arguments
#

parse_args() {
while [ $# -gt 0 ] ; do
#    echo "Processing arg: '$1'"
    case "$1" in
        -h|-help) cat <<EOF
Usage: $0 {options} arguments

Options can be

   -h -help
        shows usage
   -jdk_home <path>
        specifies the JDK directory

   -hotspot
   -client
   -server
   -classic
   -native
   -green
        specifies the type of JVM

   -J<jvm_options>
        passes <jvm_option> to JVM
   -cp:p <classpath>
        prepends <classpath> to classpath
   -cp:a <classpath>
        appends <classpath> to classpath

All other options and arguments are passed to the program.
See documentation for details.

EOF
exit 1
;;
        -jdk_home) shift; if [ $# -gt 0 ] ; then jdk_home=$1; fi;;
        #-mainclass) shift; if [ $# -gt 0 ] ; then app_class=$1; fi;;
        -cp|-cp:a)
            shift;
            if [ $# -gt 0 ] ; then
                if [ ! -z "$postfixcp" ] ; then postfixcp="$postfixcp:" ; fi
                postfixcp=$postfixcp$1;
            fi
            ;;

        -cp:p)
            shift;
            if [ $# -gt 0 ] ; then
                if [ ! -z "$prefixcp" ] ; then prefixcp="$prefixcp:" ; fi
                prefixcp=$prefixcp$1;
            fi
            ;;

        -hotspot|-client|-server|-classic|-native|-green) thread_flag=$1;;
        -J-hotspot|-J-client|-J-server|-J-classic|-J-native|-J-green) thread_flag=`expr $1 : '-J\(.*\)'`;;
        -J*) jopt=`expr "$1" : '-J\(.*\)'`; jargs="$jargs \"$jopt\"";;
        *) args="$args \"$1\"" ;;
    esac
    shift
done
} # parse_args()


append_jars_to_cp() {
    dir="$1"
    for ex in jar zip ; do
        if [ "`echo ${dir}/*.$ex`" != "${dir}/*.$ex" ] ; then
            for x in ${dir}/*.$ex ; do
                if [ ! -z "$cp" ] ; then cp="$cp:" ; fi
                cp="$cp$x"
            done
        fi
    done
}

build_cp() {
    base="$1"
    # ADDED - 20070222 - fchoong - added sys/lib
    append_jars_to_cp "${base}/sys/lib"
    append_jars_to_cp "${base}/lib"
}

#
# check JDK
#

check_jdk()
{
	if [ -z "$jdk_home" ] ; then
    		echo "Cannot find JDK. Please set the JAVA_HOME environment variable to point"
    		echo "to your JDK installation directory, or use the -jdk_home switch"
    		echo ""
    		exit 1
	fi

	if [ ! -x "${jdk_home}/bin/java" ] ; then
    		echo "Cannot find JDK at ${jdk_home}. Please set the JAVA_HOME"
    		echo "environment variable to point to your JDK installation directory,"
    		echo "or use the -jdk_home switch"
    		echo ""
    	exit 1
	fi
} # check_jdk()check_jdk()


# JDK tools

build_jdk_cp()
{
	for ex in jar zip ; do
    	# XXX does this still work if ${jdk_home} contains spaces?
    	if [ "`echo ${jdk_home}/lib/*.$ex`" != "${jdk_home}/lib/*.$ex" ] ;then
        	for x in ${jdk_home}/lib/*.$ex ; do
            	if [ ! -z "$cp" ] ; then cp="$cp:" ; fi
            	cp="${cp}$x"
        	done
    	fi
	done
} # build_jdk_cp()

# user-specified prefix and postfix CLASSPATH
build_usr_cp()
{

	if [ ! -z "${prefixcp}" ] ; then
    	cp="${prefixcp}:$cp"
	fi

	if [ ! -z "${postfixcp}" ] ; then
    	cp="$cp:${postfixcp}"
	fi
} # build_usr_cp()

# Simple Age Function
# Adapted from Blaine Simpson's Age script
# Age one file at a time only, so pass it will process only the first parameter
# All the files are moved by one age with the overaged ones being deleted
# Max is aging is set to 3.
# Maybe improved later to add more functionality.
age()
{
	MAXAGE=3
	let OVERAGE=MAXAGE+1
	LOGPATH="$1"
	DIRNAME=`dirname $LOGPATH`
	FILE=`basename $LOGPATH`
	cd $DIRNAME
	i=$MAXAGE
	let j=i+1
	while [ $i -gt 0 ]; do
		[ -e $FILE.$i ] && {
			mv $FILE.$i $FILE.$j 2>&- || {
				echo "ERROR: Failed to move file '$FILE.$i' to '$FILE.$j'"
			}
		}
		let i=i-1
		let j=i+1
	done

	mv $FILE $FILE.$j

	#delete overaged files
	[ -a $FILE.$OVERAGE ] && {
		`rm -rf $FILE.$OVERAGE`
	}

} # age()


# Doing the main processing

pre_main()
{
	#
	# defaults
	#
	use_java_home

	# Process arguments given on the command line.
	#$parse_args "$@"
	# arguements are handled directly by Java main()

	check_jdk

	#ulimit -n 1024

	#
	# main
	#

	#
	# build CLASSPATH
	#

	# app_home comes first

	build_cp ${app_home}
	#build_jdk_cp
} # pre_main()
